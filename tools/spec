#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015 Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

"""
VTYSH specification definition and generation module.
"""

from __future__ import unicode_literals, absolute_import
from __future__ import print_function, division

import logging
from re import sub
from collections import OrderedDict
from os.path import abspath, normpath, dirname, join

from inflection import parameterize, underscore, camelize
from jinja2 import FunctionLoader, Environment, StrictUndefined


log = logging.getLogger(__name__)


VTYSH_SPEC = OrderedDict([
    ('root', {
        'doc': '',
        'arguments': [],
        'pre_commands': [],
        'post_commands': [],
        'commands': [
            {
                'command': 'show interface {port}',
                'doc': 'Interface infomation.',
                'arguments': [
                    {
                        'name': 'portlbl',
                        'doc': 'Label that identifies interface.',
                    },
                ],
                'returns': True
            },
            {
                'command': 'show vlan',
                'doc': 'Show VLAN configuration.',
                'arguments': [],
                'returns': True
            },
            {
                'command': 'show lacp interface {port}',
                'doc': 'Show LACP interface.',
                'arguments': [
                    {
                        'name': 'portlbl',
                        'doc': 'Label that identifies interface.',
                    }
                ],
                'returns': True
            },
            {
                'command': 'show lacp aggregates {lag}',
                'doc': 'Show LACP aggregates.',
                'arguments': [
                    {
                        'name': 'lag',
                        'doc': 'Link-aggregate name.',
                        'optional': True
                    }
                ],
                'returns': True
            },
            {
                'command': 'show lacp configuration',
                'doc': 'Show LACP configuration.',
                'arguments': [],
                'returns': True
            },
            {
                'command': 'show lldp neighbor-info {port}',
                'doc': 'Show global LLDP neighbor information.',
                'arguments': [
                    {
                        'name': 'portlbl',
                        'doc': 'Label that identifies interface.'
                    }
                ],
                'returns': True
            },
            {
                'command': 'show lldp statistics',
                'doc': 'Show LLDP statistics.',
                'arguments': [],
                'returns': True
            },
            {
                'command': 'show ip bgp summary',
                'doc': 'Show bgp neighbors information summary.',
                'arguments': [],
                'returns': True
            },
            {
                'command': 'show ip bgp neighbors',
                'doc': 'Show bgp neighbors information.',
                'arguments': [],
                'returns': True
            },
            {
                'command': 'show ip bgp',
                'doc': 'Show bgp routing information.',
                'arguments': [],
                'returns': True
            }
        ]
    }),
    ('configure', {
        'doc': 'Configuration terminal',
        'arguments': [],
        'pre_commands': ['configure terminal'],
        'post_commands': ['end'],
        'commands': [
            {
                'command': 'no vlan {vlan_id}',
                'doc': 'Delete a VLAN',
                'arguments': [
                    {
                        'name': 'vlan_id',
                        'doc': 'VLAN Identifier.',
                    },
                ],
            },
            {
                'command': 'no interface lag {lag_id}',
                'doc': 'Delete a lag',
                'arguments': [
                    {
                        'name': 'lag_id',
                        'doc': 'link-aggregation identifier.',
                    },
                ],
            },
            {
                'command': 'ip route {ipv4} {next_hop} {metric}',
                'doc': 'Configure static routes',
                'arguments': [
                    {
                        'name': 'ipv4',
                        'doc': 'A.B.C.D/M IP destination prefix.',
                    },
                    {
                        'name': 'next_hop',
                        'doc': 'Can be an ip address or a interface.',
                    },
                    {
                        'name': 'metric',
                        'doc': 'Optional, route address to configure.',
                        'optional': True
                    },
                ],
            },
            {
                'command': 'no ip route {ipv4} {next_hop} {metric}',
                'doc': 'Un-configure static routes',
                'arguments': [
                    {
                        'name': 'ipv4',
                        'doc': 'A.B.C.D/M IP destination prefix.',
                    },
                    {
                        'name': 'next_hop',
                        'doc': 'Can be an ip address or a interface.',
                    },
                    {
                        'name': 'metric',
                        'doc': 'Optional, route address to configure.',
                        'optional': True
                    },
                ],
            },
            {
                'command': 'ipv6 route {ipv6} {next_hop} {metric}',
                'doc': 'Configure static routes',
                'arguments': [
                    {
                        'name': 'ipv6',
                        'doc': 'X:X::X:X/M IP destination prefix.',
                    },
                    {
                        'name': 'next_hop',
                        'doc': 'Can be an ip address or a interface.',
                    },
                    {
                        'name': 'metric',
                        'doc': 'Optional, route address to configure.',
                        'optional': True
                    },
                ],
            },
            {
                'command': 'no ipv6 route {ipv6} {next_hop} {metric}',
                'doc': 'Un-configure static routes',
                'arguments': [
                    {
                        'name': 'ipv6',
                        'doc': 'X:X::X:X/M IP destination prefix.',
                    },
                    {
                        'name': 'next_hop',
                        'doc': 'Can be an ip address or a interface.',
                    },
                    {
                        'name': 'metric',
                        'doc': 'Optional, route address to configure.',
                        'optional': True
                    },
                ],
            },
            {
                'command': 'lacp system-priority {priority}',
                'doc': 'Set LACP system priority.',
                'arguments': [
                    {
                        'name': 'priority',
                        'doc': '<0-65535>  The range is 0 to 65535.',
                    },
                ],
            },
            {
                'command': 'feature lldp',
                'doc': 'Configure LLDP parameters.',
                'arguments': [],
            },
            {
                'command': 'no feature lldp',
                'doc': 'Un-configure LLDP parameters.',
                'arguments': [],
            },
        ]
    }),
    ('config_interface', {
        'doc': 'Interface configuration.',
        'arguments': [
            {
                'name': 'portlbl',
                'doc': 'Label that identifies an interface.'
            }
        ],
        'pre_commands': ['config terminal', 'interface {port}'],
        'post_commands': ['end'],
        'commands': [
            {
                'command': 'ip address {ipv4}',
                'doc': 'Set IP address',
                'arguments': [
                    {
                        'name': 'ipv4',
                        'doc': 'A.B.C.D/M Interface IP address.',
                    },
                ],
            },
            {
                'command': 'no ip address {ipv4}',
                'doc': 'Unset IP address',
                'arguments': [
                    {
                        'name': 'ipv4',
                        'doc': 'A.B.C.D/M Interface IP address.',
                    },
                ],
            },
            {
                'command': 'ip address {ipv4} secondary',
                'doc': 'Set secondary IP address',
                'arguments': [
                    {
                        'name': 'ipv4',
                        'doc': 'A.B.C.D/M Interface IP address.',
                    },
                ],
            },
            {
                'command': 'no ip address {ipv4} secondary',
                'doc': 'Unset secondary IP address',
                'arguments': [
                    {
                        'name': 'ipv4',
                        'doc': 'A.B.C.D/M Interface IP address.',
                    },
                ],
            },
            {
                'command': 'ipv6 address {ipv6}',
                'doc': 'Set IPv6 address',
                'arguments': [
                    {
                        'name': 'ipv6',
                        'doc': 'X:X::X:X/M  Interface IPv6 address',
                    },
                ],
            },
            {
                'command': 'no ipv6 address {ipv6}',
                'doc': 'Unset IPv6 address',
                'arguments': [
                    {
                        'name': 'ipv6',
                        'doc': 'X:X::X:X/M  Interface IPv6 address',
                    },
                ],
            },
            {
                'command': 'ipv6 address {ipv6} secondary',
                'doc': 'Set secondary IPv6 address',
                'arguments': [
                    {
                        'name': 'ipv6',
                        'doc': 'X:X::X:X/M  Interface IPv6 address',
                    },
                ],
            },
            {
                'command': 'no ipv6 address {ipv6} secondary',
                'doc': 'Unset IPv6 address',
                'arguments': [
                    {
                        'name': 'ipv6',
                        'doc': 'X:X::X:X/M  Interface IPv6 address',
                    },
                ],
            },
            {
                'command': 'routing',
                'doc': 'Configure interface as L3.',
                'arguments': [],
            },
            {
                'command': 'no routing',
                'doc': 'Unconfigure interface as L3.',
                'arguments': [],
            },
            {
                'command': 'shutdown',
                'doc': 'Enable an interface.',
                'arguments': [],
            },
            {
                'command': 'no shutdown',
                'doc': 'Disable an interface.',
                'arguments': [],
            },
            {
                'command': 'vlan access {vlan_id}',
                'doc': 'Access configuration',
                'arguments': [
                    {
                        'name': 'vlan_id',
                        'doc': '<1-4094>  VLAN identifier'
                    }
                ],
            },
            {
                'command': 'no vlan access {vlan_id}',
                'doc': 'Remove vlan access',
                'arguments': [
                    {
                        'name': 'vlan_id',
                        'doc': '<1-4094>  VLAN identifier'
                    }
                ],
            },
            {
                'command': 'vlan trunk allowed {vlan_id}',
                'doc': 'Allow VLAN on the trunk port',
                'arguments': [
                    {
                        'name': 'vlan_id',
                        'doc': '<1-4094>  VLAN identifier'
                    }
                ],
            },
            {
                'command': 'no vlan trunk allowed {vlan_id}',
                'doc': 'Disallow VLAN on the trunk port',
                'arguments': [
                    {
                        'name': 'vlan_id',
                        'doc': '<1-4094>  VLAN identifier'
                    }
                ],
            },
            {
                'command': 'vlan trunk native tag',
                'doc': 'Tag configuration on the trunk port',
                'arguments': [],
            },
            {
                'command': 'no vlan trunk native tag',
                'doc': 'Remove tag configuration on the trunk port',
                'arguments': [],
            },
            {
                'command': 'vlan trunk native {vlan_id}',
                'doc': 'Native VLAN on the trunk port',
                'arguments': [
                    {
                        'name': 'vlan_id',
                        'doc': '<1-4094>  VLAN identifier'
                    }
                ],
            },
            {
                'command': 'no vlan trunk native {vlan_id}',
                'doc': 'Remove native VLAN on the trunk port',
                'arguments': [
                    {
                        'name': 'vlan_id',
                        'doc': '<1-4094>  VLAN identifier'
                    }
                ],
            },
            {
                'command': 'lacp port-id {port_id}',
                'doc': 'Set port ID used in LACP negotiation.',
                'arguments': [
                    {
                        'name': 'port_id',
                        'doc': '<1-65535>  .The range is 1 to 65535'
                    }
                ],
            },
            {
                'command': 'lacp port-priority {port_priority}',
                'doc': 'Set port priority is used in LACP negotiation.',
                'arguments': [
                    {
                        'name': 'port_priority',
                        'doc': '<1-65535>  The range is 1 to 65535'
                    }
                ],
            },
            {
                'command': 'lag {lag_id}',
                'doc': 'Add the current interface to link aggregation.',
                'arguments': [
                    {
                        'name': 'lag_id',
                        'doc': '<1-2000>  LAG number ranges from 1 to 2000'
                    }
                ],
            },
            {
                'command': 'no lag {lag_id}',
                'doc': 'Remove the current interface to link aggregation.',
                'arguments': [
                    {
                        'name': 'lag_id',
                        'doc': '<1-2000>  LAG number ranges from 1 to 2000'
                    }
                ],
            },
            {
                'command': 'lldp transmission',
                'doc': 'Set the transmission on lldp.',
                'arguments': [],
            },
            {
                'command': 'no lldp transmission',
                'doc': 'Un-set the transmission on lldp.',
                'arguments': [],
            },
            {
                'command': 'lldp reception',
                'doc': 'Set the reception on lldp.',
                'arguments': [],
            },
            {
                'command': 'no lldp reception',
                'doc': 'Un-set the reception on lldp.',
                'arguments': [],
            },
        ]
    }),
    ('config_interface_vlan', {
        'doc': 'VLAN configuration.',
        'arguments': [
            {
                'name': 'vlan_id',
                'doc': 'Vlan id within <1-4094> and should not'
                       'be an internal vlan.'
            }
        ],
        'pre_commands': ['config terminal', 'interface vlan {vlan_id}'],
        'post_commands': ['end'],
        'commands': [
            {
                'command': 'ip address {ipv4}',
                'doc': 'Set IP address',
                'arguments': [
                    {
                        'name': 'ipv4',
                        'doc': 'A.B.C.D/M Interface IP address.',
                    },
                ],
            },
            {
                'command': 'no ip address {ipv4}',
                'doc': 'Unset IP address',
                'arguments': [
                    {
                        'name': 'ipv4',
                        'doc': 'A.B.C.D/M Interface IP address.',
                    },
                ],
            },
            {
                'command': 'ip address {ipv4} secondary',
                'doc': 'Set secondary IP address',
                'arguments': [
                    {
                        'name': 'ipv4',
                        'doc': 'A.B.C.D/M Interface IP address.',
                    },
                ],
            },
            {
                'command': 'no ip address {ipv4} secondary',
                'doc': 'Unset secondary IP address',
                'arguments': [
                    {
                        'name': 'ipv4',
                        'doc': 'A.B.C.D/M Interface IP address.',
                    },
                ],
            },
            {
                'command': 'ipv6 address {ipv6}',
                'doc': 'Set IPv6 address',
                'arguments': [
                    {
                        'name': 'ipv6',
                        'doc': 'X:X::X:X/M  Interface IPv6 address',
                    },
                ],
            },
            {
                'command': 'no ipv6 address {ipv6}',
                'doc': 'Unset IPv6 address',
                'arguments': [
                    {
                        'name': 'ipv6',
                        'doc': 'X:X::X:X/M  Interface IPv6 address',
                    },
                ],
            },
            {
                'command': 'ipv6 address {ipv6} secondary',
                'doc': 'Set secondary IPv6 address',
                'arguments': [
                    {
                        'name': 'ipv6',
                        'doc': 'X:X::X:X/M  Interface IPv6 address',
                    },
                ],
            },
            {
                'command': 'no ipv6 address {ipv6} secondary',
                'doc': 'Unset IPv6 address',
                'arguments': [
                    {
                        'name': 'ipv6',
                        'doc': 'X:X::X:X/M  Interface IPv6 address',
                    },
                ],
            },
            {
                'command': 'shutdown',
                'doc': 'Enable an interface.',
                'arguments': [],
            },
            {
                'command': 'no shutdown',
                'doc': 'Disable an interface.',
                'arguments': [],
            },
        ]
    }),
    ('config_interface_lag', {
        'doc': 'Configure link-aggregation parameters.',
        'arguments': [
            {
                'name': 'lag',
                'doc': 'LAG number ranges from 1 to 2000.'
            }
        ],
        'pre_commands': ['config terminal', 'interface lag {lag}'],
        'post_commands': ['end'],
        'commands': [
            {
                'command': 'ip address {ipv4}',
                'doc': 'Set IP address',
                'arguments': [
                    {
                        'name': 'ipv4',
                        'doc': 'A.B.C.D/M Interface IP address.',
                    },
                ],
            },
            {
                'command': 'no ip address {ipv4}',
                'doc': 'Unset IP address',
                'arguments': [
                    {
                        'name': 'ipv4',
                        'doc': 'A.B.C.D/M Interface IP address.',
                    },
                ],
            },
            {
                'command': 'ip address {ipv4} secondary',
                'doc': 'Set secondary IP address',
                'arguments': [
                    {
                        'name': 'ipv4',
                        'doc': 'A.B.C.D/M Interface IP address.',
                    },
                ],
            },
            {
                'command': 'no ip address {ipv4} secondary',
                'doc': 'Unset secondary IP address',
                'arguments': [
                    {
                        'name': 'ipv4',
                        'doc': 'A.B.C.D/M Interface IP address.',
                    },
                ],
            },
            {
                'command': 'ipv6 address {ipv6}',
                'doc': 'Set IPv6 address',
                'arguments': [
                    {
                        'name': 'ipv6',
                        'doc': 'X:X::X:X/M  Interface IPv6 address',
                    },
                ],
            },
            {
                'command': 'no ipv6 address {ipv6}',
                'doc': 'Unset IPv6 address',
                'arguments': [
                    {
                        'name': 'ipv6',
                        'doc': 'X:X::X:X/M  Interface IPv6 address',
                    },
                ],
            },
            {
                'command': 'ipv6 address {ipv6} secondary',
                'doc': 'Set secondary IPv6 address',
                'arguments': [
                    {
                        'name': 'ipv6',
                        'doc': 'X:X::X:X/M  Interface IPv6 address',
                    },
                ],
            },
            {
                'command': 'no ipv6 address {ipv6} secondary',
                'doc': 'Unset IPv6 address',
                'arguments': [
                    {
                        'name': 'ipv6',
                        'doc': 'X:X::X:X/M  Interface IPv6 address',
                    },
                ],
            },
            {
                'command': 'shutdown',
                'doc': 'Enable an interface.',
                'arguments': [],
            },
            {
                'command': 'no shutdown',
                'doc': 'Disable an interface.',
                'arguments': [],
            },
            {
                'command': 'routing',
                'doc': 'Configure interface as L3.',
                'arguments': [],
            },
            {
                'command': 'no routing',
                'doc': 'Unconfigure interface as L3.',
                'arguments': [],
            },
            {
                'command': 'vlan access {vlan_id}',
                'doc': 'Access configuration',
                'arguments': [
                    {
                        'name': 'vlan_id',
                        'doc': '<1-4094>  VLAN identifier'
                    }
                ],
            },
            {
                'command': 'no vlan access {vlan_id}',
                'doc': 'Remove vlan access',
                'arguments': [
                    {
                        'name': 'vlan_id',
                        'doc': '<1-4094>  VLAN identifier'
                    }
                ],
            },
            {
                'command': 'vlan trunk allowed {vlan_id}',
                'doc': 'Allow VLAN on the trunk port',
                'arguments': [
                    {
                        'name': 'vlan_id',
                        'doc': '<1-4094>  VLAN identifier'
                    }
                ],
            },
            {
                'command': 'no vlan trunk allowed {vlan_id}',
                'doc': 'Disallow VLAN on the trunk port',
                'arguments': [
                    {
                        'name': 'vlan_id',
                        'doc': '<1-4094>  VLAN identifier'
                    }
                ],
            },
            {
                'command': 'vlan trunk native tag',
                'doc': 'Tag configuration on the trunk port',
                'arguments': [],
            },
            {
                'command': 'no vlan trunk native tag',
                'doc': 'Remove tag configuration on the trunk port',
                'arguments': [],
            },
            {
                'command': 'vlan trunk native {vlan_id}',
                'doc': 'Native VLAN on the trunk port',
                'arguments': [
                    {
                        'name': 'vlan_id',
                        'doc': '<1-4094>  VLAN identifier'
                    }
                ],
            },
            {
                'command': 'no vlan trunk native {vlan_id}',
                'doc': 'Remove native VLAN on the trunk port',
                'arguments': [
                    {
                        'name': 'vlan_id',
                        'doc': '<1-4094>  VLAN identifier'
                    }
                ],
            },
            {
                'command': 'lacp mode passive',
                'doc': 'Sets an interface as LACP passive.',
                'arguments': [],
            },
            {
                'command': 'no lacp mode passive',
                'doc': 'Sets an LACP passive interface off.',
                'arguments': [],
            },
            {
                'command': 'lacp mode active',
                'doc': 'Sets an interface as LACP active.',
                'arguments': [],
            },
            {
                'command': 'no lacp mode active',
                'doc': 'Sets an LACP active interface off.',
                'arguments': [],
            },
            {
                'command': 'lacp fallback',
                'doc': 'Enable LACP fallback mode.',
                'arguments': [],
            },
            {
                'command': 'hash l2-src-dst',
                'doc': 'Base the hash on l2-src-dst.',
                'arguments': [],
            },
            {
                'command': 'hash l3-src-dst',
                'doc': 'Base the hash on l3-src-dst.',
                'arguments': [],
            },
            {
                'command': 'lacp rate fast',
                'doc': 'Set LACP heartbeats are requested at the rate '
                       'of one per second.',
                'arguments': [],
            },
            {
                'command': 'no lacp rate fast',
                'doc': 'Set LACP heartbeats slow which is once every '
                       ' 30 seconds.',
                'arguments': [],
            },
        ]
    }),
    ('config_interface_mgmt', {
        'doc': 'Configure management interface.',
        'arguments': [],
        'pre_commands': ['config terminal', 'interface mgmt'],
        'post_commands': ['end'],
        'commands': [
            {
                'command': 'ip static {ip}',
                'doc': 'Set IP address',
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': 'Interface IP (ipv4 or ipv6) address.',
                    },
                ],
            },
            {
                'command': 'no ip static {ip}',
                'doc': 'Unset IP address',
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': 'Interface IP (ipv4 or ipv6) address.',
                    },
                ],
            },
            {
                'command': 'default-gateway {gateway}',
                'doc': 'Configure the Default gateway address (IPv4 and IPv6)',
                'arguments': [
                    {
                        'name': 'gateway',
                        'doc': 'IP (ipv4 or ipv6) address.',
                    },
                ],
            },
            {
                'command': 'no default-gateway {gateway}',
                'doc': 'Remove the Default gateway address (IPv4 and IPv6)',
                'arguments': [
                    {
                        'name': 'gateway',
                        'doc': 'IP (ipv4 or ipv6) address.',
                    },
                ],
            },
            {
                'command': 'nameserver {primary_nameserver} '
                           '{secondary_nameserver}',
                'doc': 'Configure the nameserver',
                'arguments': [
                    {
                        'name': 'primary_nameserver',
                        'doc': 'Primary nameserver (ipv4 or ipv6) address.',
                    },
                    {
                        'name': 'secondary_nameserver',
                        'doc': 'Secondary nameserver (ipv4 or ipv6) address.',
                        'optional': True
                    },
                ],
            },
            {
                'command': 'no nameserver {primary_nameserver} '
                           '{secondary_nameserver}',
                'doc': 'Configure the nameserver',
                'arguments': [
                    {
                        'name': 'primary_nameserver',
                        'doc': 'Primary nameserver (ipv4 or ipv6) address.',
                    },
                    {
                        'name': 'secondary_nameserver',
                        'doc': 'Secondary nameserver (ipv4 or ipv6) address.',
                        'optional': True
                    },
                ],
            },
            {
                'command': 'ip dhcp',
                'doc': 'Set the mode as dhcp.',
                'arguments': [],
            },
        ]
    }),
    ('config_router_bgp', {
        'doc': 'BGP configuration.',
        'arguments': [
            {
                'name': 'asn',
                'doc': '<1-4294967295> AS number ranges from 1 to 4294967295'
            }
        ],
        'pre_commands': ['config terminal', 'router bgp {asn}'],
        'post_commands': ['end'],
        'commands': [
            {
                'command': 'bgp router-id {id}',
                'doc': 'Specifies the BGP router-ID for a BGP Router',
                'arguments': [
                    {
                        'name': 'id',
                        'doc': '<A.B.C.D> IPv4 address',
                    },
                ],
            },
            {
                'command': 'no bgp router-id {id}',
                'doc': 'Removes the BGP router-ID for a BGP Router',
                'arguments': [
                    {
                        'name': 'id',
                        'doc': '<A.B.C.D> IPv4 address',
                    },
                ],
            },
            {
                'command': 'network {network}',
                'doc': 'Adds the announcement network for BGP',
                'arguments': [
                    {
                        'name': 'network',
                        'doc': '<A.B.C.D/M> IPv4 address with the prefix len',
                    },
                ],
            },
            {
                'command': 'no network {network}',
                'doc': 'Removes the announcement network for BGP',
                'arguments': [
                    {
                        'name': 'network',
                        'doc': '<A.B.C.D/M> IPv4 address'
                                ' with the prefix length',
                    },
                ],
            },
            {
                'command': 'maximum-paths {num}',
                'doc': 'Sets the maximum number of paths for a BGP route',
                'arguments': [
                    {
                        'name': 'num',
                        'doc': '<1-255> Maximum number of paths. Default is 1',
                    },
                ],
            },
            {
                'command': 'no maximum-paths {num}',
                'doc': 'Set the max number of paths to the default value of 1',
                'arguments': [
                    {
                        'name': 'num',
                        'doc': '<1-255> Maximum number of paths. Default is 1',
                    },
                ],
            },
            {
                'command': 'timers bgp {keepalive} {hold}',
                'doc': 'Sets the keepalive interval and hold time '
                       'for a BGP router',
                'arguments': [
                    {
                        'name': 'keepalive',
                        'doc': '<0-65535> Keepalive interval in seconds. '
                               'Default is 60',
                    },
                    {
                        'name': 'hold',
                        'doc': '<0 - 65535> Hold time in seconds. '
                               'Default is 180',
                    },
                ],
            },
            {
                'command': 'no timers bgp {keepalive} {hold}',
                'doc': 'Sets the default values for keepalive interval and '
                       'hold time for a BGP router',
                'arguments': [
                    {
                        'name': 'keepalive',
                        'doc': '<0 - 65535> Keepalive interval in seconds. '
                               'Default is 60',
                        'optional': True
                    },
                    {
                        'name': 'hold',
                        'doc': '<0 - 65535> Hold time in seconds. '
                               'Default is 180',
                        'optional': True
                    },
                ],
            },
            {
                'command': 'neighbor {ip} remote-as {asn}',
                'doc': 'Configures a BGP neighbor',
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': '<A.B.C.D> Neighbor IPv4 address',
                    },
                    {
                        'name': 'asn',
                        'doc': '<1 - 4294967295> Neighbor AS number. '
                               'Ranges from 1 to 4294967295',
                    },
                ],
            },
            {
                'command': 'no neighbor {ip} remote-as {asn}',
                'doc': 'Removes a BGP neighbor',
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': '<A.B.C.D> Neighbor IPv4 address',
                    },
                    {
                        'name': 'asn',
                        'doc': '<1 - 4294967295> Neighbor AS number. '
                               'Ranges from 1 to 4294967295',
                    },
                ],
            },
            {
                'command': 'neighbor {ip} description {text}',
                'doc': 'Removes a BGP neighbor',
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': '<A.B.C.D> Neighbor IPv4 address',
                    },
                    {
                        'name': 'text',
                        'doc': 'Description of the peer router. '
                               'String of maximum length 80 chars',
                    },
                ],
            },
            {
                'command': 'no neighbor {ip} description {text}',
                'doc': 'Removes a BGP neighbor',
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': '<A.B.C.D> Neighbor IPv4 address',
                    },
                    {
                        'name': 'text',
                        'doc': (
                            'Description of the peer router.'
                            'String of maximum length 80 chars'
                        ),
                        'optional': True
                    },
                ],
            },
            {
                'command': 'neighbor {ip} password {pwd}',
                'doc': 'Enables MD5 authentication on a TCP connection '
                       'between BGP peers.',
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': '<A.B.C.D> Neighbor IPv4 address',
                    },
                    {
                        'name': 'pwd',
                        'doc': (
                            'Password in plain text.'
                            'String of maximum length 80 chars'
                        ),
                    },
                ],
            },
            {
                'command': 'no neighbor {ip} password {pwd}',
                'doc': 'Removes MD5 authentication on a TCP connection '
                       'between BGP peers.',
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': '<A.B.C.D> Neighbor IPv4 address',
                    },
                    {
                        'name': 'pwd',
                        'doc': (
                            'Password in plain text.'
                            'String of maximum length 80 chars'
                        ),
                        'optional': True
                    },
                ],
            },
            {
                'command': 'neighbor {ip} timers {keepalive} {hold}',
                'doc': 'Sets the keepalive interval and hold time '
                       'for a specific BGP peer',
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': '<A.B.C.D> Neighbor IPv4 address',
                    },
                    {
                        'name': 'keepalive',
                        'doc': (
                            '<0 - 65535> Keepalive interval in seconds.'
                            'Default is 60'
                        ),
                    },
                    {
                        'name': 'hold',
                        'doc': '<0-65535> Hold time in seconds. Default is 180'
                    },
                ],
            },
            {
                'command': 'no neighbor {ip} timers {keepalive} {hold}',
                'doc': 'Sets the default values for keepalive interval '
                       'and hold time for a specific BGP peer',
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': '<A.B.C.D> Neighbor IPv4 address',
                    },
                    {
                        'name': 'keepalive',
                        'doc': (
                            '<0 - 65535> Keepalive interval in seconds.'
                            'Default is 0'
                        ),
                        'optional': True
                    },
                    {
                        'name': 'hold',
                        'doc': '<0 - 65535> Hold time in seconds. '
                               'Default is 0',
                        'optional': True
                    },
                ],
            },
            {
                'command': 'neighbor {ip} allowas-in {val}',
                'doc': 'Specifies an allow-as-in occurrence number '
                       'for an AS to be in the AS path',
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': '<A.B.C.D> Neighbor IPv4 address',
                    },
                    {
                        'name': 'val',
                        'doc': (
                            '<0 - 10> Number of times BGP can allow an '
                            'instance of AS to be in the AS_PATH'
                        ),
                        'optional': True
                    },
                ],
            },
            {
                'command': 'no neighbor {ip} allowas-in {val}',
                'doc': 'Clears the allow-as-in occurrence number for '
                       'an AS to be in the AS path',
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': '<A.B.C.D> Neighbor IPv4 address',
                    },
                    {
                        'name': 'val',
                        'doc': (
                            '<0 - 10> Number of times BGP can allow an'
                            'instance of AS to be in the AS_PATH'
                        ),
                        'optional': True
                    },
                ],
            },
            {
                'command': 'neighbor {ip} remove-private-AS',
                'doc': (
                    'Removes private AS numbers from the AS path'
                    'in outbound routing updates'
                ),
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': '<A.B.C.D> Neighbor IPv4 address',
                    },
                ],
            },
            {
                'command': 'no neighbor {ip} remove-private-AS',
                'doc': 'Resets to a cleared state (default)',
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': '<A.B.C.D> Neighbor IPv4 address',
                    },
                ],
            },
            {
                'command': 'neighbor {ip} soft-reconfiguration inbound',
                'doc': 'Enables software-based reconfiguration to generate '
                       'updates from a neighbor without clearing the BGP '
                       'session',
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': '<A.B.C.D> Neighbor IPv4 address',
                    },
                ],
            },
            {
                'command': 'no neighbor {ip} soft-reconfiguration inbound',
                'doc': 'Resets to a cleared state (default)',
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': '<A.B.C.D> Neighbor IPv4 address',
                    },
                ],
            },
            {
                'command': 'neighbor {ip} shutdown',
                'doc': (
                    'Shuts down the neighbor. This disables the peer router'
                    'but preserves neighbor configuration'
                ),
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': '<A.B.C.D> Neighbor IPv4 address',
                    },
                ],
            },
            {
                'command': 'no neighbor {ip} shutdown',
                'doc': 'Re-enables the neighbor',
                'arguments': [
                    {
                        'name': 'ip',
                        'doc': '<A.B.C.D> Neighbor IPv4 address',
                    },
                ],
            },
            {
                'command': 'neighbor {ip_or_group} peer-group {group}',
                'doc': 'Assigns a neighbor to a peer-group',
                'arguments': [
                    {
                        'name': 'ip_or_group',
                        'doc': (
                            '<A.B.C.D> Neighbor IPv4 address'
                            '<X:X::X:X> Neighbor IPv6 address'
                            '<WORD> Neighbor group'
                        ),
                    },
                    {
                        'name': 'group',
                        'doc': (
                            'Peer-group name.'
                            'String of maximum length 80 chars',
                        ),
                        'optional': True
                    },
                ],
            },
            {
                'command': 'no neighbor {ip_or_group} peer-group {group}',
                'doc': 'Removes the neighbor from the peer-group',
                'arguments': [
                    {
                        'name': 'ip_or_group',
                        'doc': (
                            '<A.B.C.D> Neighbor IPv4 address'
                            '<X:X::X:X> Neighbor IPv6 address'
                            '<WORD> Neighbor group'
                        ),
                    },
                    {
                        'name': 'group',
                        'doc': 'Peer-group name. '
                               'String of maximum length 80 chars',
                        'optional': True
                    },
                ],
            },
        ]
    }),
    ('config_vlan', {
        'doc': 'VLAN configuration.',
        'arguments': [
            {
                'name': 'vlan_id',
                'doc': '<1-4094>  VLAN identifier.'
            }
        ],
        'pre_commands': ['config terminal', 'vlan {vlan_id}'],
        'post_commands': ['end'],
        'commands': [
            {
                'command': 'shutdown',
                'doc': 'Enable the VLAN.',
                'arguments': [],
            },
            {
                'command': 'no shutdown',
                'doc': 'Disable the VLAN.',
                'arguments': [],
            },
            {
                'command': 'description {description}',
                'doc': 'Set VLAN description',
                'arguments': [
                    {
                        'name': 'description',
                        'doc': 'VLAN description.',
                    }
                ],
            },
            {
                'command': 'no description {description}',
                'doc': 'Un-set VLAN description',
                'arguments': [
                    {
                        'name': 'description',
                        'doc': 'VLAN description.',
                    }
                ],
            }
        ]
    },
    )
])

"""VTYSH Specification as a Python dictionary"""


VTYSH_TEMPLATE = """\
{%- macro param_attrs(attrs) -%}
{% if attrs -%}
, {% for attr in attrs -%}
{{ attr.name|variablize }}
{%- if 'optional' in attr.keys() and attr.optional %}=''{% endif %}
{%- if not loop.last %}, {% endif -%}
{%- endfor %}
{%- endif %}
{%- endmacro -%}
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015 Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# WARNING: This is auto-generated, do not manually modify

\"""
vtysh library.
\"""

from __future__ import unicode_literals, absolute_import
from __future__ import print_function, division

from .parser import *  # noqa


class ContextManager(object):
    \"""
    This class defines a context manager object.

    Usage:

    ::

        with ClassName(parameters) as ctx:
            ctx.first_function()
            ctx.second_function()

    This way at the beginning the **pre_commands** will be run and at the end
    the **post_commands** will clean the vtysh terminal. Every implementation
    of this class document their pre_commands and post_commands.

    \"""

{% for context_name, context in spec.items() if context_name != 'root' %}
class {{ context_name|objectize }}(ContextManager):
    \"""
    {{ context.doc|wordwrap(75)|indent(4) }}

    pre_commands:

    ::

            {{ context.pre_commands }}

    post_commands:

    ::

            {{ context.post_commands }}
    \"""
    def __init__({{ 'self, enode%s):'|format(param_attrs(context.arguments))|wordwrap(67)|indent(12) }}
        self.enode = enode
        {%- for arg in context.arguments %}
        {% if arg.name == 'portlbl' -%}
        self.port = enode.ports.get(portlbl, portlbl)
        {%- else -%}
        self.{{ arg.name }} = {{ arg.name }}
        {%- endif %}
        {%- endfor %}

    def __enter__(self):
        commands = \"""\\
        {%- for pre_command in context.pre_commands %}
            {{ pre_command }}
        {%- endfor %}
        \"""

        self.enode.libs.common.assert_batch(
            commands,
            replace=self.__dict__,
            shell='vtysh'
        )

        return self

    def __exit__(self, type, value, traceback):
        commands = \"""\\
        {%- for post_command in context.post_commands %}
            {{ post_command }}
        {%- endfor %}
        \"""

        self.enode.libs.common.assert_batch(
            commands,
            replace=self.__dict__,
            shell='vtysh'
        )
{% for command in context.commands %}
    def {{ command.command|methodize }}({{ 'self%s):'|format(param_attrs(command.arguments))|wordwrap(56)|indent(12) }}
        \"""
        {{ command.doc|wordwrap(71)|indent(8) }}

        This function runs the following vtysh command:

        ::

            # {{ command.command }}

        {% for attr in command.arguments -%}
        {{ ':param %s: %s'|format(attr.name, attr.doc)|wordwrap(70)|indent(12) }}
        {% endfor -%}
        {%- if 'returns' in command.keys() and command.returns -%}
        :return: A dictionary as returned by \\
            :func:`topology_lib_vtysh.parser.{{ 'parse_%s'|format(command.command|methodize) }}`
        {% endif -%}
        \"""
        {%- for attr in command.arguments -%}
            {% if attr.name == 'portlbl' %}
        port = self.enode.ports(portlbl, portlbl)
            {%- endif -%}
        {%- endfor %}

        {{ 'result = %s'|format("self.enode(
            '%s'.format(
                **locals()
            ),
            shell='vtysh'
        )")|format(command.command) }}

        {% if 'returns' in command.keys() and command.returns -%}
        {{ 'return parse_%s(result)'|format(command.command|methodize) }}
        {%- else -%}
        assert not result
        {%- endif %}
{% endfor %}
{% endfor -%}

{% for command in spec.root.commands %}
def {{ command.command|methodize }}({{'enode%s):'|format(param_attrs(command.arguments))|wordwrap(67)|indent(8) }}
    \"""
    {{ command.doc|wordwrap(71)|indent(4) }}

    This function runs the following vtysh command:

    ::

        # {{ command.command }}

    {% for attr in command.arguments -%}
    {{ ':param %s: %s'|format(attr.name, attr.doc)|wordwrap(75)|indent(5) }}
    {% endfor -%}
    {%- if 'returns' in command.keys() and command.returns -%}
    :return: A dictionary as returned by \\
        :func:`topology_lib_vtysh.parser.{{ 'parse_%s'|format(command.command|methodize) }}`
    {% endif -%}
    \"""
    {%- for attr in command.arguments -%}
        {% if attr.name == 'portlbl' %}
    port = enode.ports.get(portlbl, portlbl)
        {%- endif -%}
    {%- endfor %}

    {{ 'result = %s'|format("enode(
        '%s'.format(**locals()),
        shell='vtysh'
    )")|format(command.command) }}

    {% if 'returns' in command.keys() and command.returns -%}
    {{ 'return parse_%s(result)'|format(command.command|methodize) }}
    {%- else %}
    assert not result
    {% endif %}

{% endfor %}
__all__ = [
    'ContextManager',
{%- for context_name in spec.keys() if context_name != 'root' %}
    '{{ context_name|objectize }}',
{%- endfor %}
{%- for function in spec.root.commands %}
    '{{ function.command|methodize }}'{% if not loop.last %},{% endif %}
{%- endfor %}
]

"""  # noqa


def filter_objectize(token):
    if token is None:
        return None
    return camelize(underscore(parameterize(underscore(token))))


def filter_methodize(token):
    if token is None:
        return None
    return underscore(parameterize(underscore(sub('{\S+}', '', token))))


def filter_variablize(token):
    if token is None:
        return None
    return underscore(parameterize(underscore(token)))


def build():
    """
    Build VTYSH Python module from specification.
    """

    # Build template environment
    def load_template(name):
        templates = {
            'vtysh': VTYSH_TEMPLATE
        }
        return templates[name]

    env = Environment(
        loader=FunctionLoader(load_template),
        undefined=StrictUndefined
    )
    for ftr in ['objectize', 'methodize', 'variablize']:
        env.filters[ftr] = globals()['filter_' + ftr]

    # Render template
    template = env.get_template('vtysh')
    rendered = template.render(
        spec=VTYSH_SPEC
    )

    # Write output
    root = dirname(normpath(abspath(__file__)))

    with open(join(
            root,
            '{}.py'.format('../lib/topology_lib_vtysh/library')),
            'w') as module:
        module.write(rendered)


__all__ = ['VTYSH_SPEC']


if __name__ == '__main__':
    build()
